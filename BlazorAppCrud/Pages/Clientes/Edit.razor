@page "/clientes/edit/{id}"
@using BlazorAppCrud.Models
@using BlazorAppCrud.Helpers
@using BlazorAppCrud.Services

@inject IAlertService AlertService

@inject IClienteService clienteService
@inject NavigationManager NavigationManager

<h1>Editar Cliente</h1>
@if (model != null)
{
    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="form-row">
            <div class="form-group col">
                <label>Nombre</label>
                <InputText @bind-Value="model.nombre" class="form-control" />
                <ValidationMessage For="@(() => model.nombre)" />
            </div>
            <div class="form-group col">
                <label>EDAD</label>
                <input @bind="model.edad" class="form-control" />
                <ValidationMessage For="@(() => model.edad)" />
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col">
                <label>Dirección</label>
                <InputText @bind-Value="model.email" class="form-control" />
                <ValidationMessage For="@(() => model.email)" />
            </div>
           
        </div>
        <div class="form-group">
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Actualizar
            </button>
            <NavLink href="customers" class="btn btn-link">Cancelar</NavLink>
        </div>
    </EditForm>
}
else
{
    <div class="text-center p-3">
        <span class="spinner-border spinner-border-lg align-center"></span>
    </div>
}

@code {
    private EditCliente model;
    private bool loading;

    [Parameter]
    public string id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var cliente = await clienteService.GetById(int.Parse(id));
        model = new EditCliente(cliente);
    }
  

    private async void OnValidSubmit()
    {
        loading = true;
        try
        {
            await clienteService.Update(int.Parse(id), model);
            AlertService.Success("Actualización Exitosa", keepAfterRouteChange: true);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}